trigger:
- master

stages:
- stage: CI
  jobs:
  - job: Validate
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '0.11.13'            
      - task: Bash@3
        displayName: Lint
        inputs:
          targetType: 'inline'
          script: '/opt/hostedtoolcache/terraform/0.11.13/x64/terraform fmt -check=true'

# Sandbox
      - task: TerraformCLI@0
        displayName: Init - sandbox
        inputs:
          command: 'init'
          backendType: 'azurerm'
          backendServiceArm: 'azurerm_rpetemp_rg_creator'
          backendAzureRmResourceGroupName: 'core-infra-rpetemp'
          backendAzureRmStorageAccountName: 'rpetemptfstate'
          backendAzureRmContainerName: 'rpetemp'
          backendAzureRmKey: 'rgs/sandbox.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/sandbox'
      - task: TerraformCLI@0
        displayName: Validate - Sandbox
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/sandbox'

      - task: TerraformCLI@0
        displayName: Plan - Sandbox
        inputs:
          command: 'plan'
          commandOptions: '-out=tfplan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/sandbox'
          environmentServiceName: 'azurerm_rpetemp_rg_creator'
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'sandbox'
          targetPath: '$(System.DefaultWorkingDirectory)/sandbox'
# AAT
      - task: TerraformCLI@0
        displayName: Init - aat
        inputs:
          command: 'init'
          backendType: 'azurerm'
          backendServiceArm: 'azurerm_rpetemp_rg_creator'
          backendAzureRmResourceGroupName: 'core-infra-rpetemp'
          backendAzureRmStorageAccountName: 'rpetemptfstate'
          backendAzureRmContainerName: 'rpetemp'
          backendAzureRmKey: 'rgs/aat.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/aat'
      - task: TerraformCLI@0
        displayName: Validate - aat
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/aat'
      - task: TerraformCLI@0
        displayName: Plan - AAT
        inputs:
          command: 'plan'
          commandOptions: '-out=tfplan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/aat'
          environmentServiceName: 'azurerm_rpetemp_rg_creator'
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'aat'
          targetPath: '$(System.DefaultWorkingDirectory)/aat'
- stage: Sandbox  
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'sandbox'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@1
              inputs:
                buildType: 'current'
                artifactName: 'sandbox'
                targetPath: '$(System.DefaultWorkingDirectory)'
            - task: Bash@3
              displayName: 'Show files'
              inputs:
                targetType: 'inline'
                script: 'ls -lash'
            - task: TerraformInstaller@0
              inputs:
                terraformVersion: '0.11.13'
            - task: TerraformCLI@0
              displayName: Init
              inputs:
                command: 'init'
                backendType: 'azurerm'
                backendServiceArm: 'azurerm_rpetemp_rg_creator'
                backendAzureRmResourceGroupName: 'core-infra-rpetemp'
                backendAzureRmStorageAccountName: 'rpetemptfstate'
                backendAzureRmContainerName: 'rpetemp'
                backendAzureRmKey: 'rgs/sandbox.tfstate'
            - task: TerraformCLI@0
              displayName: Apply
              inputs:
                command: 'apply'
                commandOptions: 'tfplan'
                environmentServiceName: 'azurerm_rpetemp_rg_creator'
- stage: Perftest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: Sandbox
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'perftest'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Not setup yet'
            inputs:
              targetType: 'inline'
              script: 'echo hello world'
- stage: ITHC
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: Sandbox
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'ithc'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Not setup yet'
            inputs:
              targetType: 'inline'
              script: 'echo hello world'
- stage: Demo
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: Sandbox
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'demo'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Not setup yet'
            inputs:
              targetType: 'inline'
              script: 'echo hello world'
- stage: AAT
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: Sandbox
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'aat'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@1
              inputs:
                buildType: 'current'
                artifactName: 'aat'
                targetPath: '$(System.DefaultWorkingDirectory)'
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: 'ls -lash'
            - task: TerraformInstaller@0
              inputs:
                terraformVersion: '0.11.13'
            - task: TerraformCLI@0
              displayName: Init
              inputs:
                command: 'init'
                backendType: 'azurerm'
                backendServiceArm: 'azurerm_rpetemp_rg_creator'
                backendAzureRmResourceGroupName: 'core-infra-rpetemp'
                backendAzureRmStorageAccountName: 'rpetemptfstate'
                backendAzureRmContainerName: 'rpetemp'
                backendAzureRmKey: 'rgs/aat.tfstate'
            - task: TerraformCLI@0
              displayName: Apply
              inputs:
                command: 'apply'
                commandOptions: 'tfplan'
                environmentServiceName: 'azurerm_rpetemp_rg_creator'
- stage: Prod
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: Sandbox
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'prod'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Not setup yet'
            inputs:
              targetType: 'inline'
              script: 'echo hello world'
